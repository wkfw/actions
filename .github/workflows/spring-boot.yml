name: 'Spring boot build and register to Amazon ECR'

on:
  workflow_call:
    inputs:
      aws-region:
        description: 'AWS Region'
        required: true
        type: string
      ecr-repository:
        description: 'ECR Repository'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: true
      SLACK_WEBHOOK:
        description: 'Slack Webhook URL'
        required: true
    outputs:
      aws-region:
        description: 'AWS Region'
        value: ${{ inputs.aws-region }}
      ecr-repository:
        description: 'ECR Repository'
        value: ${{ inputs.ecr-repository }}
      image-tag:
        description: 'Image tag'
        value: ${{ jobs.build.outputs.image-tag }}

permissions:
  contents: read
  actions: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    outputs:
      image-tag: ${{ steps.build-image.outputs.image-tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Start Redis
        uses: supercharge/redis-github-action@1.4.0

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Execute Gradle build
        run: ./gradlew build

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/${{ inputs.ecr-repository }}:$IMAGE_TAG -t $ECR_REGISTRY/${{ inputs.ecr-repository }}:latest .
          docker push $ECR_REGISTRY/${{ inputs.ecr-repository }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ inputs.ecr-repository }}:latest
          
          # outputs
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          job_name: Build # 버그가 있어서 job_name 사용, issue: https://github.com/8398a7/action-slack/issues/185
          fields: repo,message,commit,author,eventName,ref,workflow,job,took,pullRequest
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always() # Pick up events even if the job fails or is canceled.
